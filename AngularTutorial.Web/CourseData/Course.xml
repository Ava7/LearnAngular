<?xml version="1.0" encoding="utf-8" ?>
<Course xmlns="http://angulartutorial.azurewebsites.net/Course.xsd">
  <Module Id="d088bf2b-3cc0-4260-96e4-5d9566918118" Title="Getting Started">
    <Step Id="cceefa09-dac9-42b1-b4b1-d74abacda62b" Title="Introducing AngularJS">
      <Instructions>
        <![CDATA[
Introducing AngularJS

AngularJS is a JavaScript framework that is used to enhance web applications by applying the Model-View-Controller (MVC) to client-side code. As you go through these lessons, you'll see that Angular helps make web applications more powerful, more robust, and more testable, all in reducing the amount of code that you, the developer, have to write.

##MVC
The MVC pattern separates application architecture into three distinct components:

+ The model - The model is at the heart of an MVC application. It contains data, business logic, functions and pretty much everything else that makes your application what it is.
+ The view - The view is what presents data from the model to the user of the application. It also is the entry-point for user-interaction with the application, as it contains all of the buttons, text fields and other controls that people will use to manipulate your app.
+ The controller - The controller is what brings an MVC application together. The controller connects the model and the view by retrieving data from the model and passing it to the view for presentation, and by handling user input collected by the view and sending it to the model for processing.

What makes MVC so powerful is that each component has a clearly-defined role which keeps it from encroaching on the roles of the other two. This makes the application both easy to maintain and easy to test.

##Where Angular comes in

Traditionally in the realm of web development, the MVC pattern has been implemented on the server side. This is because applications would do most or all of their data processing on the server. We all know of websites where changing the value of a drop-down list results in a page refresh.

Nowadays, however, we are able to do much better. We still use web servers to do data processing, but we can handle much more of the small stuff directly on the client side with JavaScript. And when we need more complex processing done, we can send an Ajax request to the web server and display the results to the user without requiring a refresh.

But this breakthrough in web development comes with a caveat. More logic on the client-side means much more JavaScript to write. It also means that the "view" of a traditional MVC web application contains more and more functional code that is not necessarily linked purely to the display of model data.

This is where AngularJS comes to the rescue. Angular takes the MVC pattern and applies it to the front end of our web applications, allowing us to once again decouple the different components of our program. In addition to this, it offers a robust data-binding framework which eliminates the need to write repetitive JavaScript functions in order to keep model data up to date with the data that the user interacts with. All of this means that your applications become richer, simpler and more testable.

Over the course of these tutorials we'll get to all of these features, but let's start out simple, by integrating Angular into a simple web page...
      ]]>
      </Instructions>
    </Step>
    <Step Id="c3975818-4e8a-49b0-b58a-88808a4dcc95" Title="Integrating Angular">
      <Instructions>
        <![CDATA[
<p>Let's start writing some code! Here we have an HTML Document into which we're going to integrate AngularJS, as well as a pre-made controller. If you look at the controller you'll notice a few things:</p>

<ul>
<li>The controller is defined by calling the "controller" method on an Angular "module". You can think of modules as logical containers in an Angular application. Modules are created by calling <code>angular.module</code> and passing in a name.</li>
<li>The controller method takes two parameters
  <ul>
    <li>A string representing the controller name.</li>
    <li>An array used to instantiate the controller. The array contains the names of all the dependencies which we wish to pass to the controller function, followed by the controller function itself. In this case we are passing the $scope to the controller so that we can add a field to the model.</li>
  </ul>
</li>
</ul>

<p>To integrate this controller into our application, you need to make two changes to the HTML Document.</p>

<ul>
<li>Add <code>ng-app="AngularTutorial"</code> to the <code>html</code> element. This tells Angular that our application is defined in the AngularTutorial module.</li>
<li>Add <code>ng-controller="GettingStartedController"</code> to the <code>div</code> element. This tells Angular that this part of our application is defined by the GettingStartedController controller that is found in the AngularTutorial module.</li>
</ul>

<p><code>ng-app</code> and <code>ng-controller</code> are known in Angular-speak as "directives". Directives are used to attach functionality to a view. Directives are a core part of the larger AngularJS framework, and later on we'll learn how to write our own.</p>
<p>There is one more particularity about our HTML Document: the <code>{{message}}</code> string in our div element. This is called a binding, and prints the value of the "message" variable onto the screen. Once you have added the <code>ng-app</code> and <code>ng-controller</code> directives to the Document, "Hello World!" should be displayed. Try it now.</p>
      ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Initial>
            <![CDATA[
<html>
    <body>
        <div>{{message}}</div>
        <!-- In a real web application include a reference
             to angular.js -->
    </body>
</html>
          ]]>
          </Initial>
          <Solution>
            <![CDATA[
<html ng-app="Tutorial">
    <body>
        <div ng-controller="TutorialController">{{message}}</div>
            <!-- In a real web application include a reference
                 to angular.js -->
    </body>
</html>
          ]]>
          </Solution>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module('Tutorial', [])
    .controller('TutorialController', ["$scope", function ($scope) {
        $scope.message = "Hello World!";
    }]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module('Tutorial', [])
    .controller('TutorialController', ["$scope", function ($scope) {
        $scope.message = "Hello World!";
    }]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Step>
  </Module>
  <Module Id="eec8a418-66a3-4b56-bf63-b7c521e21698" Title="The second module...">
    <Step Id="14c3209c-cd6b-437c-9c1b-e5132fa261d4" Title="The second module 1">
      <Instructions>
        <![CDATA[
AngularJS is a JavaScript framework that allows us to write interactive web applications that are both powerful and easy to maintain. Angular makes use of the ubiquitous Model-View-Controller pattern, which means that developers familiar with server-side MVC frameworks will feel right at home with Angular. As is defined in the MVC pattern, Angular developers strive to decorrelate the following three application components:

<ul>
<li>The data and core business logic underlying the application (the model)</li>
<li>The presentation logic defining how the user visualises application data (the view)</li>
<li>The functionality provided to the user, allowing him/her to interact with the model via the view (the controller)</li>
</ul>

In Angular, these three concepts are represented by the following components

<ul>
<li>Model - A JavaScript object referred to as $scope acts as the model in an Angular application. We will speak more about $scope very shortly, but for the time being all that you need to know is that $scope is a JavaScript object which contains both data and logic that is presented to and accessed by the user.</li>
<li>View - In Angular, the view is represented by the HTML we write to present the contents of the model. The HTML in an Angular app is generally written as a template which is filled in by the data from the model.</li>
<li>Controller - The controller is what binds together the model and the view. Angular controllers are defined in JavaScript usually in the form of a function that takes $scope (the model) as a parameter and prepares it for use by the user.</li>
</ul>
      ]]>
      </Instructions>
    </Step>
    <Step Id="08a14819-3dc8-494a-97d9-106c092ce4b4" Title="The second module 2">
      <Instructions>
        <![CDATA[
<p>Let's start writing some code! Here we have an HTML Document into which we're going to integrate AngularJS, as well as a pre-made controller. If you look at the controller you'll notice a few things:</p>

<ul>
<li>The controller is defined by calling the "controller" method on an Angular "module". You can think of modules as logical containers in an Angular application. Modules are created by calling <code>angular.module</code> and passing in a name.</li>
<li>The controller method takes two parameters
  <ul>
    <li>A string representing the controller name.</li>
    <li>An array used to instantiate the controller. The array contains the names of all the dependencies which we wish to pass to the controller function, followed by the controller function itself. In this case we are passing the $scope to the controller so that we can add a field to the model.</li>
  </ul>
</li>
</ul>

<p>To integrate this controller into our application, you need to make two changes to the HTML Document.</p>

<ul>
<li>Add <code>ng-app="AngularTutorial"</code> to the <code>html</code> element. This tells Angular that our application is defined in the AngularTutorial module.</li>
<li>Add <code>ng-controller="GettingStartedController"</code> to the <code>div</code> element. This tells Angular that this part of our application is defined by the GettingStartedController controller that is found in the AngularTutorial module.</li>
</ul>

<p><code>ng-app</code> and <code>ng-controller</code> are known in Angular-speak as "directives". Directives are used to attach functionality to a view. Directives are a core part of the larger AngularJS framework, and later on we'll learn how to write our own.</p>
<p>There is one more particularity about our HTML Document: the <code>{{message}}</code> string in our div element. This is called a binding, and prints the value of the "message" variable onto the screen. Once you have added the <code>ng-app</code> and <code>ng-controller</code> directives to the Document, "Hello World!" should be displayed. Try it now.</p>
      ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Initial>
            <![CDATA[
<html>
  <body>
    <div>{{message}}</div>
  </body>
</html>
          ]]>
          </Initial>
          <Solution>
            <![CDATA[
<html ng-app="Tutorial">
  <body>
    <div ng-controller="GettingStartedController">{{message}}</div>
  </body>
</html>
          ]]>
          </Solution>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Step>
    <Step Id="bc682b85-a178-46b7-91cf-2b3d54e2c711" Title="The second module 3">
      <Instructions>
        <![CDATA[
<p>Let's start writing some code! Here we have an HTML Document into which we're going to integrate AngularJS, as well as a pre-made controller. If you look at the controller you'll notice a few things:</p>

<ul>
<li>The controller is defined by calling the "controller" method on an Angular "module". You can think of modules as logical containers in an Angular application. Modules are created by calling <code>angular.module</code> and passing in a name.</li>
<li>The controller method takes two parameters
  <ul>
    <li>A string representing the controller name.</li>
    <li>An array used to instantiate the controller. The array contains the names of all the dependencies which we wish to pass to the controller function, followed by the controller function itself. In this case we are passing the $scope to the controller so that we can add a field to the model.</li>
  </ul>
</li>
</ul>

<p>To integrate this controller into our application, you need to make two changes to the HTML Document.</p>

<ul>
<li>Add <code>ng-app="AngularTutorial"</code> to the <code>html</code> element. This tells Angular that our application is defined in the AngularTutorial module.</li>
<li>Add <code>ng-controller="GettingStartedController"</code> to the <code>div</code> element. This tells Angular that this part of our application is defined by the GettingStartedController controller that is found in the AngularTutorial module.</li>
</ul>

<p><code>ng-app</code> and <code>ng-controller</code> are known in Angular-speak as "directives". Directives are used to attach functionality to a view. Directives are a core part of the larger AngularJS framework, and later on we'll learn how to write our own.</p>
<p>There is one more particularity about our HTML Document: the <code>{{message}}</code> string in our div element. This is called a binding, and prints the value of the "message" variable onto the screen. Once you have added the <code>ng-app</code> and <code>ng-controller</code> directives to the Document, "Hello World!" should be displayed. Try it now.</p>
      ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Initial>
            <![CDATA[
<html>
  <body>
    <div>{{message}}</div>
  </body>
</html>
          ]]>
          </Initial>
          <Solution>
            <![CDATA[
<html ng-app="Tutorial">
  <body>
    <div ng-controller="GettingStartedController">{{message}}</div>
  </body>
</html>
          ]]>
          </Solution>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Step>
    <Step Id="687d72e3-f7f7-4460-9bb5-fc794004eba8" Title="The Second Module 4">
      <Instructions>
        <![CDATA[
<p>Let's start writing some code! Here we have an HTML Document into which we're going to integrate AngularJS, as well as a pre-made controller. If you look at the controller you'll notice a few things:</p>

<ul>
<li>The controller is defined by calling the "controller" method on an Angular "module". You can think of modules as logical containers in an Angular application. Modules are created by calling <code>angular.module</code> and passing in a name.</li>
<li>The controller method takes two parameters
  <ul>
    <li>A string representing the controller name.</li>
    <li>An array used to instantiate the controller. The array contains the names of all the dependencies which we wish to pass to the controller function, followed by the controller function itself. In this case we are passing the $scope to the controller so that we can add a field to the model.</li>
  </ul>
</li>
</ul>

<p>To integrate this controller into our application, you need to make two changes to the HTML Document.</p>

<ul>
<li>Add <code>ng-app="AngularTutorial"</code> to the <code>html</code> element. This tells Angular that our application is defined in the AngularTutorial module.</li>
<li>Add <code>ng-controller="GettingStartedController"</code> to the <code>div</code> element. This tells Angular that this part of our application is defined by the GettingStartedController controller that is found in the AngularTutorial module.</li>
</ul>

<p><code>ng-app</code> and <code>ng-controller</code> are known in Angular-speak as "directives". Directives are used to attach functionality to a view. Directives are a core part of the larger AngularJS framework, and later on we'll learn how to write our own.</p>
<p>There is one more particularity about our HTML Document: the <code>{{message}}</code> string in our div element. This is called a binding, and prints the value of the "message" variable onto the screen. Once you have added the <code>ng-app</code> and <code>ng-controller</code> directives to the Document, "Hello World!" should be displayed. Try it now.</p>
      ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Initial>
            <![CDATA[
<html>
  <body>
    <div>{{message}}</div>
  </body>
</html>
          ]]>
          </Initial>
          <Solution>
            <![CDATA[
<html ng-app="Tutorial">
  <body>
    <div ng-controller="GettingStartedController">{{message}}</div>
  </body>
</html>
          ]]>
          </Solution>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module('AngularTutorial').controller('GettingStartedController', ["$scope", function ($scope) {
  $scope.message = "Hello World!";
}]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Step>
  </Module>
</Course>