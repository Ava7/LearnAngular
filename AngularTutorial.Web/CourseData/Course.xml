<?xml version="1.0" encoding="utf-8" ?>
<Course xmlns="http://angulartutorial.azurewebsites.net/Course.xsd">
  <Module Id="d088bf2b-3cc0-4260-96e4-5d9566918118" Title="Getting Started">
    <Lesson Id="cceefa09-dac9-42b1-b4b1-d74abacda62b" Title="Introducing AngularJS">
      <Instructions>
        <![CDATA[
AngularJS is a JavaScript framework that is used to enhance web applications by applying the Model-View-Controller (MVC) to client-side code. As you go through these lessons, you'll see that Angular helps make web applications more powerful, more robust, and more testable, all in reducing the amount of code that you, the developer, have to write.

##MVC

The MVC pattern separates application architecture into three distinct components:

+ The model - The model is at the heart of an MVC application. It contains data, business logic, functions and pretty much everything else that makes your application what it is.
+ The view - The view is what presents data from the model to the user of the application. When the model changes, the view is supposed to update to reflect the changes to the user. In an Angular app the view is your HTML which is enhanced with AngularJS syntax to dynamically display data from the model.
+ The controller - Traditionally, the controller serves to accept data from the user and dispatch it to the model which then updates the view. In Angular, the controller serves primarily to prepare the model for use in the application by adding appropriate data and logic.

What makes MVC so powerful is that each component has a clearly-defined role which keeps it from encroaching on the roles of the other two. This makes the application both easy to maintain and easy to test.

##Where Angular comes in

Traditionally in the realm of web development, the MVC pattern has been implemented on the server side. This is because applications would do most or all of their data processing on the server. We all know of websites where changing the value of a drop-down list results in a page refresh.

Nowadays, however, we are able to do much better. We still use web servers to do data processing, but we can handle much more of the small stuff directly on the client side with JavaScript. And when we need more complex processing done, we can send an Ajax request to the web server and display the results to the user without requiring a refresh.

But this breakthrough in web development comes with a caveat. More logic on the client-side means much more JavaScript to write. It also means that the "view" of a traditional MVC web application contains more and more functional code that is not necessarily linked purely to the display of model data.

This is where AngularJS comes to the rescue. Angular takes the MVC pattern and applies it to the front end of our web applications, allowing us to once again decouple the different components of our program. In addition to this, it offers a robust data-binding framework which eliminates the need to write repetitive JavaScript functions in order to keep model data up to date with the data that the user interacts with. All of this means that your applications become richer, simpler and more testable.

Over the course of these tutorials we'll get to all of these features, but let's start out simple, by integrating Angular into a simple web page...
      ]]>
      </Instructions>
    </Lesson>
    <Lesson Id="c3975818-4e8a-49b0-b58a-88808a4dcc95" Title="Integrating Angular">
      <Instructions>
        <![CDATA[
*These lessons are intended to be interactive. Follow along in the code pages on the right as we go!*

---

Let's jump right in and take a look at how to start integrating Angular into a web page.

What you see down there in the JavaScript window is the code that is going to run off Angular to enhance our web page. Let's break this down bit by bit.

`angular.module('Tutorial', [])`

This is where it all begins. Here we are declaring a module called "Tutorial". You can think of an Angular module as a logical container of functionality. Angular is built on modules, and in order to build an application we're going to have to start by declaring one.

In case you were wondering, the empty array after the module name is used for dependency injection. If you're not familiar with dependency injection I suggest you take a moment to get acquainted with the basics before continuing on, as Angular depends on it heavily. We'll take a look at how DI works in just a second, but for the moment just know that in *all cases* you *must* include this array in the `module` call, whether it is empty or not. If you don't the module won't be constructed correctly and you'll be left wondering where you went wrong.

`.controller('TutorialController', ...`

This is where we start to declare our controller. To do so, we're calling the `controller` function on the result of the `module` call from just a moment ago. The first argument in our controller call is the name. Here we're creating a controller called `TutorialController`.


    ["$scope", function ($scope) {
            $scope.message = "Hello World!";
        }]

This array is the second and final argument to the `controller` function. The final element is the function which defines the controller. All elements in the array leading up to the function are names of dependencies that are injected into the controller as arguments. In this case, we are injecting just a single dependency, the `$scope`

The `$scope` object is very important to our application. It acts as our model. As you can see, we use the controller to add a `message` variable to the `$scope` which we will be able to access from our view.

##Adding Angular to the page

Now that we have our controller and model all figured out, let's turn our attention to our view. For the moment our page is pretty sparse. All we have is a single `div` element in an empty page. Our goal for this Lesson will be to display the `message` variable defined in the model inside that div in our view.

In order to integrate Angular into our page we need three things.

+ A reference to the AngularJS script file as well as references to any other related script files such as the one in which we define our controller. In these lessons I reference all these files behind the scenes for you, so you needn't worry about it.
+ An `ng-app` *directive* applied to the root element of our page.
+ An `ng-controller` directive applied somewhere within our page.

Before we go any further, let's take a second to talk about what a directive is. You can think of directives as elements within an HTML page that tell AngularJS to take a certain action at that location in the DOM. Directives are often seen in the form of HTML attributes, but can also take the form of element class names, HTML comments, or even custom HTML tags.

`ng-app` and `ng-controller` are both examples of directives. The `ng-app` directive serves to tell Angular what module to use as the "root module" for our application. In our case, our root module will be the `Tutorial` module that we defined in our JavaScript. To enable AngularJS in our page, we apply `ng-app` as an attribute to a high-level element in our HTML page and set its value to the name of our root module.

`<html ng-app="Tutorial">`

`ng-controller` serves to tell Angular what controller to use in a given part of a view. *Everything inside the element on which `ng-controller` is declared can use Angular directives to access the controller's `$scope` object.*

In our case, let's apply the `ng-controller` directive to the `div` element in our page, setting the controller to be the one we declared in our JavaScript, like so.

`<div ng-controller="TutorialController">`

That's all there is to it, we now have a fully "Angular" web page on our hands! However if you try running the page as-is you're going to be pretty disappointed. While our page is now Angular-capable, we have done nothing to make use of the superheroic* power that Angular provides us with.

##My first data binding
We're going to get into data-bindings in the next section, but as our goal was to display the `message` variable in our page, we're going to get started right away. To display the message inside the `div`, simply insert the following syntax.

`{{message}}`

That's all we need! The double curly-braces signals to Angular to insert the value of the expression inside the braces into the page. In this case here, Angular looks at the `$scope` object of the controller in context and evaluates the `message` member. It is however important to note that we are by no means restricted to using the `$scope` object. We can also evaluate run-of-the-mill JavaScript expressions as well. For example, `{{1 + 1}}` is also valid syntax. Try it out and see!

##What we learned
1. Angular apps are divided into modules which house various application components.
2. Directives are used to add Angular functionality to HTML pages.
3. `ng-app` tells Angular which module to use as the "root module".
4. `ng-controller` tells Angular which controller to use in a given area of an HTML page.
5. `{{expression}}` is used to embed the result of JavaScript expressions into views. It also provides access to the `$scope` of the controller in context.

---

\* *It is the "Superheroic JavaScript MVW Framework" after all!*
      ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Initial>
            <![CDATA[
<html>
    <body>
        <div></div>
    </body>
</html>
          ]]>
          </Initial>
          <Solution>
            <![CDATA[
<html ng-app="Tutorial">
    <body>
        <div ng-controller="TutorialController">{{message}}</div>
    </body>
</html>
          ]]>
          </Solution>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module('Tutorial', [])
    .controller('TutorialController', ["$scope", function ($scope) {
        $scope.message = "Hello World!";
    }]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module('Tutorial', [])
    .controller('TutorialController', ["$scope", function ($scope) {
        $scope.message = "Hello World!";
    }]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Lesson>
  </Module>
  <Module Id="3a6e3464-c89f-4601-8d3d-75d669332274" Title="Data Binding">
    <Lesson Id="2c1de643-4271-4844-8868-0455109d0bbb" Title="Two-way bindings">
      <Instructions>
        <![CDATA[
In the last lesson we saw how we can display a model value in our view using the double curly bracket syntax (`{{name}}`). While this is no doubt useful, the real power of data-binding is being able to modify these values from the view and having the changes reflected in the model.

For this example, we're going to bind each variable in the model to its corresponding input field in the HTML. In order to do this, we need to make use of the `ng-model` directive. We use `ng-model` by applying it in the form of an attribute to an input field. The value of the attribute is the name of the `$scope` variable to which we wish to bind.

So, to kick off the example, to bind `$scope.favoriteWord` to our text field we simply need to modify the `input` tag as follows.

`<input type="text" ng-model="$favoriteWord" />`

That's all there is to it. With this knowledge in hand you can now go ahead and bind the other two values to their relevant fields. Remember that radio button values are retrieved from each individual `input` tag, and that drop-down values are retrieved from the all-encompassing `select` tag.

Once the values are bound, use the double curly bracket syntax to display each value next to its corresponding input!
        ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Header>
            <![CDATA[
<html ng-app="Tutorial">
  <body>
            ]]>
          </Header>
          <Initial>
            <![CDATA[
<div ng-controller="BindingController">
	<div>
		Favorite number: <input type="text" />
		- [Display selection here]
	</div>
	<div>
		Favorite color:
		<input type="radio" name="fc" value="Red">Red</input>
		<input type="radio" name="fc" value="Green">Green</input>
		<input type="radio" name="fc" value="Yellow">Yellow</input>
		<input type="radio" name="fc" value="Blue">Blue</input>
		- [Display selection here]
	</div>
	<div>
		Favorite shape:
		<select>
			<option value="Circle">Circle</option>
			<option value="Triangle">Triangle</option>
			<option value="Square">Square</option>
		</select>
		- [Display selection here]
	</div>
</div>
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
<div ng-controller="BindingController">
	<div>
		Favorite word: <input type="text" ng-model="favoriteWord" />
		- {{favoriteWord}}
	</div>
	<div>
		Favorite color:
		<input type="radio" name="fc" value="Red" ng-model="favoriteColor">Red</input>
		<input type="radio" name="fc" value="Green" ng-model="favoriteColor">Green</input>
		<input type="radio" name="fc" value="Yellow" ng-model="favoriteColor">Yellow</input>
		<input type="radio" name="fc" value="Blue" ng-model="favoriteColor">Blue</input>
		- {{favoriteColor}}
	</div>
	<div>
		Favorite shape:
		<select ng-model="favoriteShape">
			<option value="Circle">Circle</option>
			<option value="Triangle">Triangle</option>
			<option value="Square">Square</option>
		</select>
		- {{favoriteShape}}
	</div>
</div>      
            ]]>
          </Solution>
          <Footer>
            <![CDATA[
  </body>
</html>
            ]]>
          </Footer>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module("Tutorial", [])
    .controller("BindingController", ["$scope", function($scope) {
        $scope.favoriteWord;
        $scope.favoriteColour;
        $scope.favoriteShape;
    }]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module("Tutorial", [])
    .controller("BindingController", ["$scope", function($scope) {
        $scope.favoriteWord;
        $scope.favoriteColour;
        $scope.favoriteShape;
    }]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Lesson>
    <Lesson Id="7718aa8f-040f-4ee5-9553-410e41d4ab06" Title="Binding CSS classes">
      <Instructions>
        <![CDATA[
Angular offers conditional binding of CSS classes via the `ng-class` directive. The directive takes an expression which can be in one of three formats.

+ A string of space-delimited class names.
+ An array of class names.
+ A map (object) where the keys are class names and the values are boolean values indicating whether or not to apply the class.

Note that the directive takes an expression. This is standard practice for Angular directives. What this means is that whatever you pass to `ng-class` will be *evaluated* and it is the result of this evaluation which must fall into one of the three categories above. This means that you can include small bits of embedded logic, or better yet, function calls back to your model, to tell Angular what classes to apply and when.

##Example

For this demo, I've defined three CSS classes for you behind the scenes:

+ `bold`
+ `italic`
+ `underline`

Let's try applying these three classes to the `span` of sample text in the HTML window according to the following logic:

+ If the value in the textbox % 2 == 0, apply `bold`.
+ If the value in the textbox % 3 == 0, apply `italic`.
+ If the value in the textbox % 5 == 0, apply `underline`.

For this example, let's try to do this with a map.

We'll start by defining a function for each of the criteria in the controller.

`$scope.isBold = function () { return $scope.value % 2 === 0; };`
`$scope.isItalic = function () { return $scope.value % 3 === 0; };`
`$scope.isUnderlined = function () { return $scope.value % 5 === 0; };`

Now, let's apply the `ng-class` directive to the span of text in the form of an attribute, and pass it a map of class names and boolean values.

`ng-class="{bold: isBold(), italic: isItalic(), underline: isUnderlined()}`

Once applied, when you change the number in the text field, the class(es) applied to the sample text should change accordingly. Try it out!
        ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Header>
            <![CDATA[
<html ng-app="app">
<head>
<style>
.bold {
	font-weight: bold;
}
.italic {
	font-style: italic;
}
.underline {
	text-decoration: underline;
}
</style>
</head>
<body ng-controller="controller">
            ]]>
          </Header>
          <Initial>
            <![CDATA[
<input type="text" ng-model="value" />
<span>Example Text</span>
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
<input type="text" ng-model="value" />
<span ng-class="{bold: isBold(), italic: isItalic(), underline: isUnderlined()}">
	Example Text
</span>
            ]]>
          </Solution>
          <Footer>
            <![CDATA[
</body>
</html>
            ]]>
          </Footer>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module("app", [])
	.controller("controller", ["$scope", function ($scope) {
		$scope.value = 1;
	}]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module("app", [])
	.controller("controller", ["$scope", function ($scope) {
		$scope.value = 1;
		$scope.isBold = function () { return $scope.value % 2 === 0; };
		$scope.isItalic = function () { return $scope.value % 3 === 0; };
		$scope.isUnderlined = function () { return $scope.value % 5 === 0; };
	}]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Lesson>
    <Lesson Id="77ae323e-1d60-43ba-9dc1-a1ad46c09a74" Title="Repeaters">
      <Instructions>
        <![CDATA[
It often happens that you need to display a collection of data to the user. For this task, Angular provides you with the `ng-repeat` directive. `ng-repeat` gives you the power to define a template for a single item in a collection, and then have it be repeated for all the elements in a collection.

The syntax for `ng-repeat` is super easy. In attribute form, it looks like this:

`ng-repeat="element in collection"`

Where `collection` is a collection in scope and `element` is a variable used to reference each element throughout the iteration.

In addition to this, Angular exposes several variables that allow you to gain information about the element currently being iterated on.

+ `$index` - The index of the current element.
+ `$first` - Boolean indicating if the element is the first in the collection.
+ `$middle` - Boolean indicating if the element is neither first nor last in the collection.
+ `$last` - Boolean indicating if the element is the last in the collection.
+ `$even` - Boolean indicating if the element's index is even.
+ `$odd` - Boolean indicating if the element's index is even.

These variables can be used freely within the scope of the iteration.

##Example

For this example, I've gone ahead and defined the CSS class `oddRow` behind the scenes. `oddRow` will change the background color of the element to which it is applied to a light gray color. What we're going to do in this example is populate the HTML table which is currently empty with the list of products defined in `controller.js`.

The first thing to do is to define what we want one row of the table to look like. Let's do that now, filling in the empty `tbody` tag with a single row.


	<tbody>
		<tr>
			<td></td>
			<td></td>
		</tr>
	</tbody>

Great. Now let's add the repeat directive. It is important to understand that `ng-repeat` will repeat *itself and its contents* for each element in the collection. We must therefore apply it to the `<tr>` element (not the `tbody` element).

	<tbody>
		<tr ng-repeat="product in products">
			<td></td>
			<td></td>
		</tr>
	</tbody>

Let's now go ahead and populate the cells with the values from the collection objects.

	<tr ng-repeat="product in products">
		<td>{{product.id}}</td>
		<td>{{product.name}}</td>
	</tr>

Almost done! Now let's apply the `oddRow` class to every odd-indexed `<tr>`. We'll need to use the `ng-class` directive that we learned about in the last lesson for this.

	<tr ng-repeat="product in products" ng-class="if ($odd) { return "oddRow"; }">
		<td>{{product.id}}</td>
		<td>{{product.name}}</td>
	</tr>

We're done! Run the program and check out the results!
        ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Header>
            <![CDATA[
<html ng-app="app">
<head>
<style>
.oddRow { background-color: #EEE; }
table { border-spacing: 0; }
td { border: 1px solid black; padding: 0 1em 0 1em; }
</style>
</head>
<body>
            ]]>
          </Header>
          <Initial>
            <![CDATA[
<div ng-controller="controller">
  <table>
	  <thead>
		  <tr>
			  <td>Id</td>
			  <td>Name</td>
		  </tr>
	  </thead>
	  <tbody>
	  </tbody>
  </table>
</div>
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
<div ng-controller="controller">
  <table>
	  <thead>
		  <tr>
			  <td>Id</td>
			  <td>Name</td>
		  </tr>
	  </thead>
	  <tbody>
		  <tr ng-repeat="product in products"
			  ng-class="{oddRow: $odd}">
			  <td>{{product.id}}</td>
			  <td>{{product.name}}</td>
		  </tr>
	  </tbody>
  </table>
</div>
            ]]>
          </Solution>
          <Footer>
            <![CDATA[
</body>
</html>
            ]]>
          </Footer>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
angular.module("app", [])
	.controller("controller", ["$scope", function($scope) {
		$scope.products = [
			{id: 1, name: "Hockey puck"},
			{id: 2, name: "Golf club"},
			{id: 3, name: "Baseball bat"},
			{id: 4, name: "Lacrosse stick"}
		];
}]);
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
angular.module("app", [])
	.controller("controller", ["$scope", function($scope) {
		$scope.products = [
			{id: 1, name: "Hockey puck"},
			{id: 2, name: "Golf club"},
			{id: 3, name: "Baseball bat"},
			{id: 4, name: "Lacrosse stick"}
		];
}]);
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Lesson>
  </Module>
  <!--<Module Id="" Title="Test Module">
    <Lesson Id="" Title="Empty Lesson">
      <Instructions>
        <![CDATA[
        
        ]]>
      </Instructions>
      <Html>
        <Document Name="index.html">
          <Header>
            <![CDATA[
            
            ]]>
          </Header>
          <Initial>
            <![CDATA[
            
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
            
            ]]>
          </Solution>
          <Footer>
            <![CDATA[
            
            ]]>
          </Footer>
        </Document>
      </Html>
      <JavaScript>
        <Document Name="controller.js">
          <Initial>
            <![CDATA[
            
            ]]>
          </Initial>
          <Solution>
            <![CDATA[
            
            ]]>
          </Solution>
        </Document>
      </JavaScript>
    </Lesson>
  </Module>-->
</Course>